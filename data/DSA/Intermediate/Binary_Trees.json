{
  "category": "DSA",
    "title": "Binary Trees",
    "level": "Intermediate",
    "Difficulty": "Easy",
    "timer": "20 minutes",
    "skill": "30%",
    "knowledge": "50%",
    "application": "20%",
    "why": "This Binary Trees module strengthens understanding of hierarchical data structures, focusing on traversal techniques, tree properties, and the behavior of binary search trees. It evaluates both conceptual knowledge and the application of tree-based problem-solving strategies common in technical interviews.",

    "questions": [
      {
        "question": "Scenario: For a binary tree with nodes [5, 3, 7], what is the inorder traversal output?",
        "options": [
          "3, 5, 7",
          "5, 3, 7",
          "7, 5, 3",
          "3, 7, 5"
        ],
        "correctAnswer": "3, 5, 7"
      },
      {
        "question": "What does the 'root' of a binary tree represent?",
        "options": [
          "The topmost node",
          "The leftmost leaf",
          "The node with the smallest value",
          "The deepest node"
        ],
        "correctAnswer": "The topmost node"
      },
      {
        "question": "In a preorder traversal, when is the root visited?",
        "options": [
          "Before its children",
          "After its children",
          "Between its children",
          "Only if it’s a leaf"
        ],
        "correctAnswer": "Before its children"
      },
      {
        "question": "Scenario: A binary tree has nodes [1, 2, 3] with 1 as root, 2 as left child, and 3 as right child. What’s the postorder traversal?",
        "options": [
          "2, 3, 1",
          "1, 2, 3",
          "3, 2, 1",
          "1, 3, 2"
        ],
        "correctAnswer": "2, 3, 1"
      },
      {
        "question": "What is the height of a binary tree with only a root node?",
        "options": [
          "0",
          "1",
          "2",
          "Null"
        ],
        "correctAnswer": "0"
      },
      {
        "question": "Why is inorder traversal useful for a binary search tree (BST)?",
        "options": [
          "It prints nodes in sorted order",
          "It visits the root first",
          "It skips leaf nodes",
          "It balances the tree"
        ],
        "correctAnswer": "It prints nodes in sorted order"
      },
      {
        "question": "Scenario: You need to insert a node with value 4 into a BST [5, 3, 7]. Where does it go?",
        "options": [
          "Right child of 3",
          "Left child of 5",
          "Right child of 7",
          "Left child of 3"
        ],
        "correctAnswer": "Right child of 3"
      },
      {
        "question": "What defines a full binary tree?",
        "options": [
          "Every node has 0 or 2 children",
          "Every level is completely filled",
          "All nodes have 1 child",
          "The height equals the number of nodes"
        ],
        "correctAnswer": "Every node has 0 or 2 children"
      },
      {
        "question": "What is the time complexity of inserting a node into a binary search tree with n nodes?",
        "options": [
          "O(h) where h is the height",
          "O(n^2)",
          "O(1)",
          "O(n log n)"
        ],
        "correctAnswer": "O(h) where h is the height"
      },
      {
        "question": "Scenario: A binary tree has height 3. What’s the minimum number of nodes it could have?",
        "options": [
          "4",
          "3",
          "7",
          "8"
        ],
        "correctAnswer": "4"
      },
      {
        "question": "Why might a binary tree become unbalanced?",
        "options": [
          "Insertions occur in sorted order",
          "Nodes are deleted randomly",
          "Traversals are performed",
          "All nodes are leaf nodes"
        ],
        "correctAnswer": "Insertions occur in sorted order"
      },
      {
        "question": "What does deleting a leaf node from a binary tree require?",
        "options": [
          "Setting its parent’s pointer to null",
          "Rebalancing the tree",
          "Updating the root",
          "Shifting all nodes up"
        ],
        "correctAnswer": "Setting its parent’s pointer to null"
      },
      {
        "question": "Scenario: You apply preorder traversal to print nodes of a tree. When might this be useful?",
        "options": [
          "To create a copy of the tree",
          "To sort the nodes",
          "To find the height",
          "To balance the tree"
        ],
        "correctAnswer": "To create a copy of the tree"
      },
      {
        "question": "What is a leaf node in a binary tree?",
        "options": [
          "A node with no children",
          "A node with one child",
          "The root node",
          "A node at maximum height"
        ],
        "correctAnswer": "A node with no children"
      },
      {
        "question": "Analyze: Why does a complete binary tree ensure efficient storage?",
        "options": [
          "All levels except the last are fully filled",
          "It has no leaf nodes",
          "It uses random insertion",
          "It has equal left and right subtrees"
        ],
        "correctAnswer": "All levels except the last are fully filled"
      },
      {
        "question": "What is the maximum number of nodes at height h in a binary tree?",
        "options": [
          "2^h",
          "2^(h+1) - 1",
          "h + 1",
          "2h"
        ],
        "correctAnswer": "2^h"
      },
      {
        "question": "Scenario: A BST has nodes [10, 5, 15, 12]. What happens when you delete 15?",
        "options": [
          "12 becomes the right child of 10",
          "5 moves up",
          "10 becomes a leaf",
          "The tree becomes unbalanced"
        ],
        "correctAnswer": "12 becomes the right child of 10"
      },
      {
        "question": "Why is postorder traversal used in tree deletion?",
        "options": [
          "It processes children before the parent",
          "It visits the root first",
          "It sorts the nodes",
          "It balances the tree"
        ],
        "correctAnswer": "It processes children before the parent"
      },
      {
        "question": "Analyze: What happens to efficiency if a BST degrades into a linked list?",
        "options": [
          "Search becomes O(n) instead of O(log n)",
          "Insertion becomes O(1)",
          "Traversal becomes faster",
          "Height becomes constant"
        ],
        "correctAnswer": "Search becomes O(n) instead of O(log n)"
      },
      {
        "question": "Scenario: You need to find the height of a tree. Which traversal could help?",
        "options": [
          "Postorder",
          "Inorder",
          "Preorder",
          "Any of the above"
        ],
        "correctAnswer": "Postorder"
      }
    ]
  }